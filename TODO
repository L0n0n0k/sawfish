-*- indented-text -*-

TODO list for sawmill
*********************

Bugs are marked !, things that should be done soon are marked +,
and longer-term ideas are marked -


Outstanding bugs
================

  ! Sometimes switching workspaces gives me an error about a nil arg,
    doesn't seem to make any difference though

  ! It's not possible to compile sawmill-ui.jl without an X connection
    (it requires 'gtk, which then calls gtk_init (), ...)

  ! Move functions.c:Fgetpid () to librep


General tasks
=============

  + Allow text-entry commands in bindings dialog?

  + Intelligent window cycling, also previous-window

  + windows appear above xscreensaver?

    there's no way around this, xscreensaver maps its virtual root
    window with override_redirect set, so the wm never even sees it
    (otherwise it could be moved to an upper layer)

  + Handle multiple-screen displays

    What are the issues? Multiple root windows, and..?

  + Add checked and radio menu item support

  + Smart placement

    What's a good algorithm? What are we trying to optimize?
    Intuitively, its the probability that we'll be able to place the
    _next_ mapped window without overlapping..

  + Handle window groups

  + better transient handling

    When moving a window to another workspace, also move any transients (?)

  + Pixmap cursors / cursor recolouring

  + Icons (?)

  + Load tarred/compressed themes

  + Export more Imlib functions

  + GNOME compliance

    Currently event proxying and the pager hints are implemented.
    Add support for the various window state operations.. (currently
    only the sticky, maximize, and layer attributes are supported)

  + Support MWM hints

    I've partially done this (also goes for OpenLook hints)

  + GUI configuration

    Customization of key bindings is a bit simplistic -- whenever a
    single binding is changed, the whole keymap is then fixed in the
    user's .sawmill-custom file

  + Support the KDE hints

    Where are they defined?

  - Rewrite key-binding

    This was originally lifted from Jade, my text editor. But it
    doesn't really fit that well...

    Also, _key_ bindings in frame parts don't work (since they're not
    grabbed and the frame part is never actually focused)

  - Custom frame parts

    It's possible for frame part backgrounds to be drawn on-the-fly
    using the `renderer' attribute. (See themes/gradient)

    This uses Imlib images as buffers for rendering into. This has two
    main advantages -- palette handling and shape masks are for free

    But the main disadvantage is the memory cost. Each pixel costs
    three bytes, so a 500x20 title bar costs ~30k. The only alternative
    is to draw directly into the frame part's window, which means we
    have to handle all colour allocation manually..

    I've added a `render-scale' attribute. This is used to reduce the
    size of the image buffer, i.e. set it to two to get a half-sized
    image (in relation to the actual frame part). Doing this reduces
    the memory usage by a factor of four, at a cost in image quality

  - Rotated text

    Allow text to be rendered at angles (in multiples of 90 degrees?).
    This could be useful for the sides of windows

  - GTK theme

    Is there any way that the gtk theme could support engine-based GTK
    themes? Probably not without using a subprocess (since the engines
    are written to GDK, not Xlib), this could get hairy..

    Also, why do themes with bg_pixmap set use so much memory? Is it
    just because the images are XPM's..?

  - Internationalisation

    This should be quite easy, since most strings are stored in the
    documentation databases anyway. There's two ways of doing this,
    either create alternate doc files for alternate languages, or do
    the doc-string lookup as normal then call gettext ()

    Also, what about the "%1$s" style printf formatting. rep's format
    function should be extended to handle this syntax


Long term ideas
===============

  - Remove root menu?

    The argument is that doing this removes the need for the wm to
    select ButtonPress events on the root window (which is a point of
    conflict with, for example, a desktop file manager)

    The sole need for the wm to manage the root menus (as far as I can
    see) is so that it can offer window management functions (such as
    "interactively move the focused window" or whatever), but all
    these things can be invoked through sawmill-client, i.e.
    "sawmill-client -c move-window-interactively"

    With a bit of work the dynamically generated menus (e.g. the window
    and workspace submenus) could also be generated through the client

  - Target guile instead of rep

    In theory this is a good idea, probably a lot of work, but still.
    These are some of the arguments/justifications for sticking with
    rep:

	1. The single-threadedness is not a problem for a window
	   manager, where the flow of control pretty much follows the X
	   event queue

	2. It's lighter-weight than guile (though the effects of sharing
	   libraries probably negates this a bit)

	3. I have some half-cooked ideas about using the built-in
	   remote-file handling to access a theme repository somewhere

	4. It has lots of support (i.e. hooks) for being used as an
	   extension language

    And these are some reasons for using guile:

	1. Scheme's a cleaner and more modern language than rep's Lisp
	   dialect (one namespace, lexical scope, continuations, ...)

	2. More people know scheme than lisp (though the closeness to
	   Emacs-lisp offsets this)

	3. Sawmill would depend on fewer "weird" libraries (librep,
	   rep-gtk), that someone (i.e. me) has to maintain

    The main things counting against guile are that I've never used it,
    and that I'm lazy

  - CORBA interface

    First write CORBA support for rep (does guile support CORBA?), then
    what? Would this be useful?

  - Theme repository

    Something similar to foo.themes.org, but I want to be able to load
    themes straight from the net

    They could be loaded through the remote-ftp system (would need to
    redefine pwd-prompt somehow, GTK?), then installed in the user's
    local theme directory, then activated (all without restarting the
    wm)

    How about a drag 'n drop target in the configurator. Load the
    specified URI then install the theme it contains

    This way you should be able to drag from both netscape and the file
    manager to activate a theme
