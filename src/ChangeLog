1999-08-07  John Harper  <john@dcs.warwick.ac.uk>

	* main.c (sawmill_symbols): set interrupt-mode and error-mode
	to top-level; try to stop the wm getting hung in a
	recursive-edit

1999-08-04  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.c (rep_dl_init): delete some properties from the root
	window that other wm's may have set but not removed

1999-08-03  John Harper  <john@dcs.warwick.ac.uk>

	* version 0.1

	* main.c (Qsawmill_version): new variable

1999-08-02  John Harper  <john@dcs.warwick.ac.uk>

	* windows.c (Fset_client_state): set the WM_STATE property of a
	window

	* main.c (add_hook): new function

	* gnome.c: support the _WIN_STATE hint (but only the sticky
	attribute)

	* events.c (configure_request): raising a window uniconify's
	it, so that the GNOME pager can uniconify windows (!?)

	* cursors.c (Fget_cursor): if a symbol, dereference it's
	cursor-shape property _before_ scanning the list for an
	existing cursor

	* windows.c (Fcall_window_hook): new function, similar to
	call-hook, but first hook argument is always a window. Before
	evaluating the symbol value, look for a property of the same
	name in the window
	* events.c, display.c, windows.c: where appropriate use
	Fcall_window_hook instead of Fcall_hook

	* gnome.c (rep_dl_init): if ignored-window-names or
	sticky-window-names are void, set them to nil before consing on
	the gnome window names

1999-08-01  John Harper  <john@dcs.warwick.ac.uk>

	* gnome.c (Fgnome_set_workspace): if no workspace is active,
	pretend that workspace zero is

	* display.c (error_handler): call destroy-notify-hook _after_
	setting window->id to zero
	(sys_init): select for SubstructureNotify on root window

	* events.c (client_message): call `client-message-hook' if
	message isn't handled. This is an `or' style hook

1999-07-31  John Harper  <john@dcs.warwick.ac.uk>

	* frames.c (list_frame_generator): detect when regenerating a
	frame by looking at w->frame instead of w->frame_parts (which
	can be null even when the window is framed)

	* gnome.c: new loadable module, minimal GNOME compliance
	(client list, button proxying, workspace details)

	* windows.c (Fwindow_size_hints): pass along the PPosition,
	PSize, USPosition and USSize flags

	* keys.c (event_proxy_fun): hook called when an unbound event
	occurs. Should return TRUE if it handles the event

1999-07-30  John Harper  <john@dcs.warwick.ac.uk>

	* frames.c: fix stupid stack-smashing bug

	* images.c (Fimage_modifier, Fset_image_modifier): new
	functions for playing with Imlib's image modifiers

	* frames.c (list_frame_generator): handle propagating the shape
	of the client to the frame here since it's a lot less ugly
	* windows.c: don't call set_window_shape in so many places

1999-07-29  John Harper  <john@dcs.warwick.ac.uk>

	* windows.c (add_window): set WM_STATE of client windows
	(Fwindow_put): when the `keymap' property changes, ungrab the
	old keymap, then grab the new one

	* keys.c (Fbind_keys, Funbind_keys): grab/ungrab events in
	client windows if binding to the `global-keymap' or a window's
	`keymap' property

	* frames.c (list_frame_generator): indirect through multiple
	symbols in frame_style

	* windows.c, server.c, functions.c, events.c, display.c:
	replaced some calls to XSync by XFlush. (XSync also buffers any
	pending events, preventing select from returning)

	* display.c: add a call to XSync in the rep_redisplay_fun hook

1999-07-28  John Harper  <john@dcs.warwick.ac.uk>

	* windows.c (fix_window_size): call set_window_shape

	* windows.c (add_window): set frame_style to nil not
	default-frame initially

	* frames.c: remove the frame data type, now frames are just
	lists, a null list is a null frame. Also, a window's frame may
	be specified as a symbol, in this case the plist of the symbol
	is used for the frame properties

	* windows.c: select VisibiltyChangeMask on the client window
	not the frame, the frame was always PartiallyObscured (by the
	client?)
	* events.c (visibility_notify): don't check that the event
	window is the frame anymore

	* sawmill.h (Lisp_Window): new field `shaped' set if the client
	window is shaped
	* events.c: handle shaped client windows (ShapeNotify events)
	* windows.c (set_window_shape): new function, copies the client
	windows shape to the frame
	(install_window_frame): call set_window_shape

	* display.c (shape_event_base, shape_error_base): new variables

	* frames.c (list_frame_generator): when regenerating a frame
	recenter the client window in the resized frame window

	* events.c (button_press): fake an unwind-protect around the
	event evaluation, so a ButtonRelease can unclick buttons
	without aborting

	* windows.c (install_window_frame): also select
	SubstructureRedirectMask for frame, so that we get
	ConfigureRequest events for the client window

1999-07-25  John Harper  <john@dcs.warwick.ac.uk>

	* frames.c (list_frame_generator): add LeaveWindowMask to frame
	parts

	* windows.c (Qplace_window_hook): new hook, called when windows
	are mapped for the first time
	(Fwindow_transient_p): now returns the id of the other window
	if the window is a transient
	(Fwindow_id, Fwindow_group_id): new functions
	(Fwindow_size_hints): new function, returns the size hints as
	an alist

	* sawmill.h: added exit types for the clean_exit_jmp_buf

	* main.c (Fquit, Frestart): new functions

	* keys.c (Qroot_window_keymap): window to use when mouse is
	over the root

	* functions.c (Fsync_server): new function, calls XSync ()

	* events.c (button_press): handle ButtonPress before evaluating
	the binding, and ButtonRelease after the binding
	(leave_notify): if leaving a frame part, ensure that the
	clicked count is zero

