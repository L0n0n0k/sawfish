#!/bin/sh
exec rep "$0" "$@"
!#

;; sawmill-ui -- subprocess to handle menus
;; $Id$

(require 'gtk)


;; menus

(defvar menu-selected nil)

(defun create-menu (spec &optional bar)
  (let
      ((menu (if bar (gtk-menu-bar-new) (gtk-menu-new))))
    (mapc #'(lambda (cell)
	      (let
		  (label item)
		(when (and cell (symbolp (car cell)) (not (functionp cell)))
		  (setq cell (symbol-value (car cell))))
		(if (null cell)
		    (setq item (gtk-menu-item-new))
		  (setq label (car cell))
		  (if (functionp (cdr cell))
		      (setq cell (funcall (cdr cell)))
		    (setq cell (cdr cell)))
		  (if (and (consp (car cell)) (not (functionp (car cell))))
		      (let
			  ((sub (create-menu cell)))
			(setq item (gtk-menu-item-new-with-label label))
			(gtk-menu-item-set-submenu item sub))
		    (setq item (gtk-menu-item-new-with-label label))
		    (gtk-signal-connect item "activate"
					`(lambda ()
					   (setq menu-selected
						 ',(car cell))))))
		(when item
		  (funcall (if bar 'gtk-menu-bar-append
			     'gtk-menu-append) menu item)
		  (gtk-widget-show item))))
	  spec)
    menu))

(defun popup-menu (spec)
  (catch 'menu-done
    (let
	((menu  (create-menu spec)))
      (gtk-signal-connect menu "deactivate" 'gtk-main-quit)
      (setq menu-selected nil)
      (gtk-menu-popup-interp menu nil nil 0 0)
      (gtk-main)
      menu-selected)))


;; entry point, loop reading command forms, sending back results

(condition-case nil
    (while t
      (let
	  ((input (read standard-input)))
	(format standard-output "%S\n" (apply (car input) (cdr input)))
	(when (filep standard-output)
	  (flush-file standard-output))))
  (end-of-stream))


;; Local Variables:
;; major-mode: lisp-mode
;; End:
