@c -*- texinfo -*-

@chapter News

This lists the user-visible changes made to Sawmill, and which releases
they occurred between. For more detailed information see the
@file{ChangeLog} files in the Sawmill source tree.


@unnumberedsec 0.21.1

@itemize @bullet

@item Fixed problem causing spurious double-click events to be reported
in click-to-focus mode

@item Fixed problem with binding @kbd{-Off} events in the
@code{window-keymap}. (Matt Krai)

@item Don't try to grab non-existent keys (which actually grabs the
entire keyboard)

@item Fixed some problems with reading unusually formatted GNOME menu
entries

@end itemize


@unnumberedsec 0.21

@itemize @bullet

@item Frame pattern definitions (foreground, background, font) may now
take alists as well as the old single object, or list of four objects.
Possible states are @code{inactive}, @code{focused},
@code{highlighted}, @code{clicked}, @code{inactive-highlighted},
@code{inactive-clicked}. (Last two are new)

@item New program @code{sawmill-themer}. A GUI for creating simple
themes (those without any parts defined by functions)

@item New module @code{gnome-int}, loaded by @code{sawmill-defaults} if
GNOME is around, sets up some GNOME'ish things

@item New command @code{toggle-single-window-mode}

@item Translation updates/additions: de (Christoph Rauch), es (Iñaki
García Etxebarria), nl (Han-Wen Nienhuys)

@item Optional removal of tooltips after time period (Morgan Schweers)

@item @kbd{Any-RET} completes interactive move or resize

@item Work around Imlib's annoying image caching, @code{make-image} now
@emph{always} returns a new image

@item Fixed gc bug when building window frames

@item Fixed X property handling on Alpha's (George Lebl)

@item Make @code{call-command} accept closures

@item Make @code{(cursor . nil)} work correctly in frame definitions

@item Grab on frame window, not client window (ICCCM compliant)

@item Fixed the ``uniconify to current workspace'' option

@item Added window-maximization predicates to the gaol

@end itemize


@unnumberedsec 0.20

@itemize @bullet

@item Rewrote workspace handling---windows can now appear on multiple
workspaces, with each instance having different properties (position,
size, whatever@dots{}) 

Create new window instances by using the @code{copy-to-next-workspace},
@code{copy-to-previous-workspace}, and @code{copy-to-workspace:@var{n}}
commands. Merge instances by moving them to the same workspace, or
using the @code{delete-window-instance} command

@item Added linear-viewport commands---indexing two-dimensional virtual
workspace areas by one-dimensional values (adapted from code by Eric
Kidd)

@item Rewrote tooltips; especially how they're removed (also, don't
show null keymaps)

@item Added new match-window property @code{ungrouped}. Means to put
the window in a group on its own

@item Translation additions/updates: da (Wandy Christiansen), en_GB
(me), es (Iñaki García Etxebarria), fr (Christian Gillot), gl (Jesus
Bravo Alvarez)

@item Fixed bug of not refocusing unshaded windows

@item Fixed bug of not notifying windows of their actual position after
placing them

@item Fixed bug when grabbing Hyper-modified buttons

@item Fixed the focus-flickering when moving windows opaquely

@item Fixed the @code{commandp} function when applied to autoload stubs

@item Fixed typo in @code{gnome-logout} command (Jens Finke)

@item Fixed @code{raise-window-and-pass-through-click} command to pass
@key{click2}, etc, events through to frame parts

@item Fixed infinite-regress bug when reading GNOME menu entries
(@samp{Type=directory}, but actually a file)

@item Fixed bug when showing window-move position with snapped movement
(adapted from merlin@@merlin.org)

@item Fixed bug when matching null text properties

@end itemize


@unnumberedsec 0.19

@itemize @bullet

@item Added tooltips for window frames (disabled by default)

@item Added @samp{Grab@dots{}} button to match-windows dialogue, grabs
the value of an X property from a window

@item Support for creating cursors from bitmaps, and for changing the
colors of cursors

@item Internationalized all strings in the configurator

@item New functions: @code{frame-part-get}, @code{server-grabbed-p},
@code{forget-button-press}, @code{resize-window-with-hints},
@code{window-in-workspace-p}, @code{windows-share-workspace-p}

@item New window properties: @code{never-focus}, @code{raise-on-focus}

@item New pseudo-property (for window matching): @code{size}, in terms
of the window's size hints

@item Message catalogue additions/updates: Galician (Jesus Bravo
Alvarez); Danish (Birger Langkjer)

@item Don't ignore initial state property of windows

@item Option to control height of drawn bevels (Chris Hanson)

@item More logical method of drawing diagonal gradients (Chris Hanson)

@item Fixed typo when looking for i18n theme README files (Jesus Bravo
Alvarez)

@item Fixed @code{popup-apps-menu} command (Gérard Milmeister)

@item Fixed @code{define-frame-class} when creating keymaps

@item Fixed conversion of old-style @code{(set @dots{})} custom types

@item Fixed @code{raise-window-and-pass-through-click} command to
pass-through subsequent clicks

@item Fixed problems when grabbing/ungrabbing customized keymaps

@item Fixed screen corruption when doing wireframe moving and
@code{move-resize-raise-window} is set

@item Hacked around window-order problem when sticky windows exist

@end itemize


@unnumberedsec 0.18

@itemize @bullet

@item General subsystem for matching windows to properties as they're
created. Allows matching on one or more of the window's X properties
(e.g. name, class, etc@dots{}), and then setting any number of window
manager properties as a result. See the @samp{Matched Windows}
customize group

@item Removed all @code{auto-@var{foo}-alist} and
@code{@var{bar}-windows-re} variables, they're obsoleted by the general
match-windows mechanism

@item Respect window's size hints when maximizing (both to see if the
window is maximizable, and to truncate the maximized dimensions to an
integral number of rows and columns)

@item Show actual colors in the configurator, not just their names

@item Added a new directory to the theme search path:
@file{@var{prefix}/share/sawmill/themes}. Use this for system-wide
themes (don't use the version specific directory)

@item Included a new theme @code{mono}

@item Deprecated the @code{show-message} function, replaced by
@code{display-message} with a better calling interface; also displays
multi-line strings

@item Deprecated the menu ``expand variables when first in list''
behaviour. Instead expand variables when the list is dotted to them, as
is done for functions

@item Support the @code{Hyper} modifier, prefix is @kbd{H-}

@item In the configurator, look for i18n'd theme README files (Yukihiro
Nakai)

@item Added option to disable the ability to grab a second edge while
resizing (@code{resize-add-edges})

@item Included Danish message catalogue (Kenneth Christiansen)

@item Renamed @code{fixed-position} property as @code{sticky-viewport},
and @code{focus-proxy-click} as @code{focus-click-through}

@item When evaluating mouse events, look in the window that the pointer
was in when the button was pressed, not where the pointer currently is

@item Fixed bug where focus gets totally lost after closing a Motif
application that has grabbed the keyboard

@item Fixed (again) the problems when handling remapped windows; also
should be more ICCCM-compliant

@item Fixed typos in one-dimensional maximisation (Gérard Milmeister)

@item Fixed the logic deciding when it's necessary to switch workspaces
after merging an empty one

@item Fixed interactive placement showing the window when edge-flipping
(but it still doesn't work properly, rubber band traces are left)

@item Removed flicker when focusing already-focused windows

@end itemize


@unnumberedsec 0.17

@itemize @bullet

@item First version to use lexically scoped librep. This enables themes
to run in a ``safe'' environment, but all existing themes will need to
be ported; other language changes include the use of a single symbol
namespace, and scheme-like function call semantics

@item Support for internationalization of messages and run-time
documentation; an en_GB catalogue is the only translation currently, so
please send me .po files for your native languages!

New option @samp{--disable-nls} to disable i18n

@item New functions @code{call-after-property-changed} and
@code{gtkrc-call-after-changed} to allow themes to receive these events
(hooks are now off-limits to themes)

@item New command @code{raise-window-and-pass-through-click}; bind it
to a mouse button in the @code{window-keymap} to get the ``raise window
on click'' behaviour that seems popular 

@item New commands to move windows incrementally:
@code{slide-window-@var{x}} and @code{slide-group-@var{x}} for @var{x}
one of: @code{left}, @code{right}, @code{up}, @code{down}

@item New commands to control @code{ignored} property of windows
(Julian Missig)

@item New commands to toggle GNOME skip-winlist and skip-tasklist
properties of windows

@item Respect window gravity with program-specified window placement
(@email{merlin@@merlin.org})

@item Fixed a memory leak in the @code{stacking-order} function

@item Fixed the @code{bevel-image} function (Scott Sams)

@item Never look in the focused window's keymap by default with mouse
events

@item Hacked around the ``need an X11 connection to compile'' misfeature

@item Fixed bug in @code{gnome-menu} code when GNOME binaries aren't in
the first $PATH item; also accept non-alphanumeric language codes

@item Fixed interactive window placement (again)

@item Rewrote obscure documentation for some custom options

@item Fixed bug when grabbing events with @code{AnyModifier} and a
specific button

@end itemize


@unnumberedsec 0.16

@itemize @bullet

@item Support window groups, both as defined by applications, and
defined by the user (either interactively through the window's menu, or
via the @code{auto-group-alist} and @code{persistent-group-ids}
variables).

For most commands working on single windows, there's also one operating
on the group that the current window is a member of. (With the notable
exception currently of moving windows.) There's also options
controlling whether (de)iconification operates on windows or groups

@item Improved GNOME menu support---merge duplicate sub-menus, scan
PATH for @code{gnome-share-directory}, also look in
@file{/etc/X11/applnk} for menu entries

@item Option to control whether edge-flipping flips viewports or
workspaces (@code{edge-flip-type})

@item New hook @code{after-framing-hook}: called whenever a window's
frame is changed or recalibrated

@item New window placement mode: @code{first-fit-or-interactive}

@item Variables specifying common cursor shapes:
(@code{move-cursor-shape}, @code{resize-cursor-shape},
@code{select-window-cursor-shape})

@item Fix interactive placement

@item Fix problem of window losing focus when @code{cycle-windows} only
finds a single window; also, abort immediately if there's no windows to
cycle through at all

@item Fix how the @code{WM_NORMAL_HINTS} property is read after it's
been updated

@item Fix @code{maximize-fill} functions to respect the
@code{maximize-ignore-when-filling} option

@item Fix interactive move/resize aborting if keyboard is already
grabbed

@item Ungrab the keyboard as well as the pointer before popping menus

@end itemize


@unnumberedsec 0.15

@itemize @bullet

@item Changed how themes are loaded from tar files---the tar file must
now contain a directory with the same name as the theme; it's this
directory that stores the data files

@item Allow viewport edge-flipping to be enabled by the customization
system, also enable flipping while moving windows

@item Unified the method of marking which windows should be avoided
when maximizing, and which windows should be avoided when using the
fitted placement methods. Set the @code{avoid} property instead of the
@code{maximize-avoid} property; new functions @code{window-avoided-p}
and @code{avoided-windows}; new regexp @code{avoided-windows-re}

@item New command @code{delete-empty-workspaces}

@item Default theme is now @code{microGUI}

@item When resizing only one edge of a window, moving the pointer past
one of the perpendicular edges grabs that edge also

@item Only the first three buttons focus a window in click-to-focus
mode

@item Changed behaviour of @code{window-id} and
@code{window-frame-dimensions} functions. Replaced
@code{query-last-pointer} function by @code{query-button-press-pointer}

@item New hooks: @code{while-moving-hook}, @code{while-resizing-hook}

@item Notice when @code{WM_TRANSIENT_FOR} property changes

@item More bug fixes to the maximization code, mainly for efficiency;
also make first-fit placement work from top-left again

@item Fix bug when matching events with @kbd{Any} modifier as well as
other modifiers

@item Fix bug in @code{window-outside-viewport-p} (Andreas Degert)

@item Fix bug in @samp{sawmill-client --} with long inputs

@item Fix bug when matching windows with session
data---@code{SM_CLIENT_ID} or @code{WM_COMMAND} @emph{has} to match

@item Fix bugs when passive grabbing non-button-press pointer events

@end itemize


@unnumberedsec 0.14

@itemize @bullet

@item Rewrote window-maximization, many new options

@item New option @code{resize-by-frame-class}, when enabled (the
default), the resized window edges are chosen to match the class of the
clicked frame part (i.e. matching the cursor shape)

@item Load GNOME support code automatically if it looks like GNOME is
being used

@item Create unix-domain sockets in @file{/tmp}

@item New hooks: @code{window-moved-hook}, @code{window-resized-hook},
@code{after-initialization-hook}, @code{shape-notify-hook}.

@item Improved how menus are displayed; the window-ops menu is shown by
ButtonPress not ButtonRelease events

@item Refocus most-recently-focused window when switching viewport

@item Added @code{centered} placement style

@item Added symbol-completion to readline-based client

@item Fix bug of not noticing WM_NORMAL_HINTS property changes; follow
the window's maximum size hints

@item Fix bug of not reframing windows when they change from unshaped
to shaped, or vice versa

@end itemize


@unnumberedsec 0.13

@itemize @bullet

@item New option to only highlight frame parts when their window is
focused (@code{highlight-when-unfocused})

@item Typing @kbd{ESC} while moving/resizing a window cancels the
operation, restoring the original geometry

@item New session management hook @code{sm-after-restore-hook}

@item New function @code{set-frame-part-value}---makes customizing the
@code{frame-part-classes} variables easier

@item Support for loading themes from tar files; needs librep 0.7

@item Fix bug when allocating colors (choosing an incorrect cached
color)

@item Fix image tiling in frame part backgrounds

@item Handle shifted keysyms when passive grabbing

@item Fix another race condition when active grabbing

@item Fix @code{_WIN_CLIENT_LIST} property not being set properly (both
missing windows immediately after they're adopted, and of intentionally
skipping ignored windows)

@item Fix some problems with viewports when exiting/restarting

@item Fix broken stacking of windows after they're mapped

@item Prevent smart window placement blowing up when large numbers of
windows are open/opened (throttle back to random placement when the
event queue is too large, as well as trying to prune the search space)

@end itemize


@unnumberedsec 0.12

@itemize @bullet

@item Remember most recently focused windows on each workspace,
activate that window after changing workspaces; also, try to preserve
focus when moving windows between workspaces

@item Option to disable auto-raise while cycling through windows
(@code{cycle-disable-auto-raise}); option to restrict cycling to the
current viewport (@code{cycle-all-viewports})

@item Option @code{lock-first-workspace} is now enabled by default, and
prevents both the first and last interesting workspaces being moved
inwards

@item Added readline support to the client program, pass
@samp{--with-readline} option to configure (from Christopher P Goller
@email{goller@@eng.utah.edu})

@item Added shaped-transient frame to microGUI theme

@item New frame part attribute @code{below-client}

@item Release passive grabs when unadopting windows

@item When no window has the focus, the @code{root-window-keymap} is
searched for key-press events

@item Fix bug when binding to the unix-domain socket

@item Fix focus sometimes being lost when the focused window is
destroyed

@item Fix bug when reading GNOME menu entries without @samp{Type}
fields

@item Fix bug when removing title or border of @code{shaped-transient}
window types (make the window completely unframed)

@item Fix bug when shading a transient window with
@code{decorate-transients} enabled

@item Fix some bugs when placing windows that are almost as big or
bigger than the screen

@item Fix some race-conditions between wm-generated and
client-generated map/unmap/reparent events

@item Fix infamous ``jerky pointer'' bug, this will also make
overlapping shaped frame-parts display correctly

@item Fix bug where @code{cycle-windows} could leave a window
originally under the pointer that's unfocused, drawn as though it is
focused

@end itemize


@unnumberedsec 0.11

@itemize @bullet

@item New option @code{lock-first-workspace}, prevent the first
workspace from being deleted when it's empty

@item New option @code{ignore-window-input-hint}, to always give
windows the focus, whether they say they will accept it or not

@item New options when cycling windows: @code{cycle-warp-pointer} and
@code{cycle-focus-windows}

@item Restore the old method of setting the focus, should fix bug of
losing focus totally when switching to a new workspace

@end itemize


@unnumberedsec 0.10

@itemize @bullet

@item Implemented virtual workspaces, bind to the
@code{move-viewport-@var{x}} and @code{move-window-@var{x}} commands
(for @var{x} being @code{left}, @code{right}, @code{up}, or
@code{down})

@item Added a new theme: @code{microGUI} by Ryan Lovett
@email{ryan@@ocf.berkeley.edu}, based on the QNX Photon screenshots

@item Added a @samp{Grab key} button in the bindings widget, replaces
the current binding with the next pressed key

@item Lisp module to load the GNOME menus and use them to replace the
applications menu. Add @code{(require 'gnome-menu)} to your
@file{~/.sawmillrc} file to load it

@item Network server is disabled by default (since it can provide a
security hole if X access control is disabled); re-enabled the old unix
domain socket code (see the FAQ for more details)

@item Only give the input focus to windows that actually want it

@item New option to keep transient windows above their parents
(@code{transients-above-parents})

@item New option to control how the workspace boundary is handled when
moving windows between workspaces (@code{workspace-send-boundary-mode})

@item New commands @code{send-to-workspace:@var{x}} for @var{x} from 1
to 9

@item While windows are hidden or shaded, unmap the client (for ICCCM
compliance)

@item Slightly different method of handling destroyed clients,
hopefully results in fewer annoying error messages

@item Support X installations without X11R6 session management (by not
doing any session management)

@item Don't ask the session manager to save our environment

@item Fix bug where a window is destroyed/unmapped while it's being
resized or moved

@item Fix bug where window can still be auto-raised even if it's been
defocused

@item Fix problems when @samp{--prefix} option has a trailing slash

@item Now handles client windows being reparented by a third party
(i.e. swallowing apps)

@end itemize


@unnumberedsec 0.9

@itemize @bullet

@item The first-fit and best-fit algorithms are now much more
intelligent, e.g. instead of falling back to random placement when a
window can't be placed without overlapping an existing window, they
will attempt to minimize this degree of overlapping

@item The @code{foreground} property of each frame part may now be an
image instead of a piece of text

@item New theme @code{smaker}, uses the foreground images capability to
do a somewhat WindowMaker-like theme (with the absolute-e images). This
theme is extensively customizable---all images, colors, dimensions,
etc@dots{}

@item Use Imlib's fuzzy color matching for all color allocation; this
should help on @code{PseudoColor} visuals

@item Added an @code{xterm} command to launch an xterm

@item Improved the bindings customization widget layout; added a
@samp{Copy} button to insert a copy of the current binding

@item Added @code{next-workspace-row} and @code{previous-workspace-row}
commands. Together with the @code{workspace-columns} variable these
mimic a 2d desktop

@item Removed the @code{cycle-through-workspaces} option, there's now
@code{workspace-boundary-mode}---one of @code{stop}, @code{wrap-around}
or @code{keep-going}

@item Added option to include ignored windows when edge snapping
(@code{move-snap-ignored-windows})

@item Fix race condition between startup of sawmill and gmc; sawmill
now has earlier priority

@item Fix seg fault when running out of color cells while generating a
window frame

@item Fix bug where the window-workspace mapping wasn't reloaded from
saved sessions

@item Fix cancel/revert problems in bindings widget

@item Fix problems binding to shifted keys when using the XKEYBOARD
extension and XFree86

@item Be ICCCM compliant when a client requests to be moved

@item Fix crash when tiling small images into large images

@item Fix bug where windows could be snapped totally off-screen

@item Fix bug when windows change their @code{override_redirect}
attribute while unmapped

@item Fix bug associated with WordPerfect's menu window

@end itemize


@unnumberedsec 0.8

@itemize @bullet

@item First attempt at best-fit window placement (doesn't really work
properly yet@dots{})

@item Added a customization option to focus windows when they're
un-iconified (@code{focus-windows-on-uniconify})

@item Fix bug in click-to-focus mode where the click is only passed
through to the client window, not to any local bindings of the wm

@item Don't leave windows unframed if there's an error in the user's
startup files

@item Fix bug in @code{preallocated-workspaces} option

@item Don't place windows off-screen in first-fit mode

@end itemize


@unnumberedsec 0.7

@itemize @bullet

@item Added stack-based window cycling, bound to @kbd{M-TAB} by
default. Hold @key{Meta}, keep pressing @key{TAB} until the correct
window is reached, then let go of @key{Meta}.

@item Added first-fit window placement (a.k.a smart-placement)

@item Completed first stage of workspace rewrite---shouldn't go
ballistic when windows are removed anymore

@item Added @code{override-frame-part-classes} variable---allows all
frame properties to be overridden on a per-class basis

@item Click-to-focus now accepts any button and any modifiers

@item Don't snap to gmc icons or panels

@item Added an @code{auto-window-type-alist} variable mapping window
names to border types

@item New variables @code{eval-modifier-events} and
@code{eval-key-release-events} to allow catching these types of
keyboard events, disabled by default

@item Added functions for actively grabbing the keyboard

@item Removed the long names of the keyboard modifiers, only the single
character modifiers are left

@item If no alt modifier, set it to the same as meta; new variables
@code{alt-keysyms} and @code{meta-keysyms} describe the virtual
modifier assignments

@item Fix bug when handling shaped frame parts---it was possible to go
into a long enter-, leave-notify loop when the old shape was cleared

@item Fix bug where opaque resizing with snap-to-edges on moved the
window as well as resizing it

@item Fix bug when raising the only managed window

@item Fix bug where very small client windows got weirdly shaped
frames

@end itemize


@unnumberedsec 0.6

@itemize @bullet

@item Define the standard @dfn{classes} of frame parts (i.e. things
like close button, title, left border, etc...) then allow the state of
members of these classes to be set in one place (the
@code{frame-part-classes} variable). This should ensure that different
themes have the same feel (but a feel that may be customized by the
user)

@item Allow frame parts to be removed if possible (if they have the
@code{removable} property). Nothing makes use of this yet

@item Added window-shading, double-click button1 on the title bar

@item Created a sawmill capplet for the GNOME control center. Use the
@samp{--enable-capplet} configure option to build it

@item First attempt at a technical manual (very quickly written, so
probably some inaccuracies)

@item In the @code{gtk} theme, draw bevels on window decorations

@item Use spin-buttons in the configurator to enter numbers

@item Add option @code{focus-proxy-click} controlling whether to pass
the focus-inducing button-press event to the underlying window (in
click-to-focus mode)

@item Changed the bindings in window borders, it's now the more usual
button1 to resize, button2 to move

@item When clicking and dragging windows, ensure that the clicked frame
part stays clicked until the button is released

@item If in click-to-focus mode, and there's no parent window to focus
when the focused window is closed, focus the topmost window (not the
window under the pointer as in the other focus modes)

@item Changing window frames is @emph{much} less ugly, no flicker at
all!

@item Try to optimise window restacking some more

@item Sped up opaque window moving when the position display is enabled

@item Preserve iconified state across restarts

@item Optimise updating the shape of an unframed window (this stops gmc
icons flashing annoyingly)

@item Fix bugs in click-to-focus mode where some windows were
un-focusable

@item Fix bug where cycling through windows in click-to-focus mode
didn't focus the activated window

@item Fix bug where comparing sawmill lisp objects caused a crash

@item Fix bug where initiating a resize in the middle of the window
didn't allow any of the edges to be moved

@item Fix bug where changing the ``decorate transients'' option didn't
alter any existing transient windows

@item Fix bug where iconifying a sticky or ignored window gave no way
of reclaiming it---these windows now appear at the end of the window
menu

@end itemize


@unnumberedsec 0.5

@itemize @bullet

@item Now does session management. The scheme is extensible, arbitrary
Lisp modules can save and restore window state due to their own
functionality (using the @code{sm-window-save-functions} and
@code{sm-restore-window-hook} hooks). See @file{lisp/workspace.jl} for
an example

@item Displays window position or dimensions whilst interactively
moving or resizing a window (@code{move-show-position},
@code{resize-show-dimensions})

@item Mechanism for setting frame styles on a per-window basis (this
was always possible, just not easy). The @code{auto-frame-style-alist}
variable associates window name regular expressions with frame styles.
Also, the @code{window-ops-menu} has a new submenu with all possible
styles

@item New option @code{preallocated-workspaces}, the number of
workspaces to create at startup

@item Window-workspace mapping is preserved through restart (as long as
the GNOME hints are enabled)

@item Theme directories may contain a short @file{README} file that
will be displayed in the configuration tool

@item Changed the custom file to @file{~/.sawmill/custom} instead of
@file{~/.sawmill-custom}. The old file will be moved to the new
location if it exists

@item Install @file{sawmill-menu} under @file{libexec} since it
shouldn't be run manually

@item Option in @code{gradient} theme to create full-sized gradient
images, trading memory for quality

@item Workaround the flicker when raising windows

@item Changed most of the @code{menus} and @code{custom} customize
options into normal variables (they're not particularly intuitive)

@end itemize


@unnumberedsec 0.4

@itemize @bullet

@item Frame parts can now be highlighted when the mouse is over them,
also they ``un-click'' and ``re-click'' as the pointer leaves and
re-enters their window. ButtonRelease bindings are only activated when
the mouse is in the window at the time

@item Frame part backgrounds can now be rendered on-the-fly using the
new @code{renderer} property in frame definitions. This property is a
function called with args @code{(@var{image} @var{state})}; it should
draw a background into @var{image} for the specified state (@code{nil},
@code{focused}, @code{highlighted} or @code{clicked})

@item New theme @code{gtk}. This reads the default GTK style and uses
the associated colors and pixmaps to decorate windows. It doesn't try
to handle engine-based themes. It should automatically detect when the
default style changes (if changed by the GNOME control center). Do
@samp{sawmill-client -c gtk-reload-style} in the shell to reload the
style manually

@item Functions for drawing color gradients and bevels into images. The
new @code{gradient} theme uses these and on-the-fly rendering to do
@code{afterstep}-like window titles

@item Configurator changes: use a paned widget to separate the list of
groups from the settings (stops their relative sizes changing), allow
each group to be customized separately, either through a new set of
root-submenus or the commands @code{customize:@var{group}} for each
@var{group}.

@item Changed the way that ``themes'' are organised, each theme now
gets its own directory, which must include a @file{theme.jl} or
@file{theme.jlc} script to initialise a frame-style of the same name as
the directory. While this script is being evaluated the image path is
set so that the theme can load any images stored in its directory.

Also created the variable @code{theme-load-path} containing the list of
directories searched when trying to load a theme. By default it
contains two directories: @file{~/.sawmill/themes/} and
@file{@var{prefix}/share/sawmill/@var{version}/themes}.

@item Resizing now chooses the direction to resize the window in by the
initial position of the pointer in relation to the window. The window
is divided into a 3x3 grid, the pointer must be in one of the outer
rectangles to resize in that direction

@item New commands @code{select-workspace:@var{X}} for @var{X} between
1 and 9

@item Support multiple depths, or layers, of windows

@item It's now possible to move the current workspace up or down the
list of all workspaces

@item New option @samp{-c COMMAND} to @code{sawmill-client}; invokes
the named interactive function

@item When an app asks for no title and no border, give it what it
wants---use the new @code{unframed} window type

@item The maximize button works

@item Option to control placement of transient windows
(@code{place-transient-mode})

@item Changing the frame style preserves the original window stacking
order

@item Added documentation strings for most built-in functions

@item Fix bug of evaluating both KeyPress @emph{and} KeyRelease events

@item Fix bug of making the shape mask of unshaped client windows too
big

@item Fix bug where already-handled BadWindow errors were being reported

@item Fix bug where the @code{window-ops-menu} could be displayed from
one window but then affect a different window

@item Fix bug where click-to-focus doesn't work for new windows

@item Fix bug where deleting the last workspace selected the first, not
the new last workspace

@item Fix bug where changing a colormap when no window is focused
causes a segfault

@item Fix bug where iconifying a window may leave it in the clicked
state after it's uniconified

@item Fix Caps_Lock and Num_Lock modifiers interfering with bindings

@item Fix accessing X properties on 64-bit architectures

@item Fix bug where pointer may be left grabbed after moving a window

@end itemize


@unnumberedsec 0.3a

@itemize @bullet

@item Support the maximized GNOME window states

@item Where available, show documentation strings of commands in the
configurator

@item Improve the method of handling clicks in frame-parts

@item Fix asynchronous client-server protocol

@item Fix interactive window moving/resizing (don't leave traces of the
rubber-band, stop the window initially ``jumping'' to the pointer)

@end itemize


@unnumberedsec 0.3

@itemize @bullet

@item Implemented window maximization

@item Added support for snapping to window edges when interactively
moving windows (@code{move-snap-edges} and @code{move-snap-epsilon})

@item First attempt at handling a subset of the Motif and OpenLook
window hints

@item Removed the @code{sloppy-focus} variable, it's replaced by
@code{focus-mode}. This can currently be one of @code{enter-exit}
(normal focus follows pointer), @code{enter-only} (``sloppy'' focus) or
@code{click} (click to focus)

@item When resolving pointer events, scan the @code{keymap} property of
the window under the pointer, not the focused window (as with keypress
events)

@item The @file{sawmill-client} program can now communicate inter-host,
since it uses X properties not raw sockets

@item New hook @code{before-exit-hook}, called immediately before
shutting down

@item Rewrote the GNOME support as a Lisp module

@item Placing windows interactively now works

@item Fixed the bug on Solaris where deleting windows could cause a
segmentation fault

@end itemize


@unnumberedsec 0.2

@itemize @bullet

@item Added a user-customization system, inspired by Emacs' customize
facility. Invoke this through the @samp{sawmill-ui} program, or from
the @samp{Customize...} entry in the main menu. All changes are stored
in the Lisp script @file{~/.sawmill-custom}

@item Selected windows may now be raised
(@code{raise-selected-windows})

@item It's possible to prevent the mouse pointer being warped to
selected windows (@code{warp-to-selected-windows})

@item The @code{brushed-metal} and @code{simple} themes now define all
four standard frame types

@item Frame themes are now stored in a separate directory
(@file{@var{prefix}/share/sawmill/@var{version}/lisp/themes}) so that
the list of all available themes can be made automatically

@item The frame colors of the @code{simple} frame style can now be
customized (@code{simple-normal-color} and @code{simple-active-color})

@item The @file{sawmill-defaults.jl} script enables GNOME compliance
unconditionally (since it has no ill-effects even if GNOME isn't being
used)

@item Transient windows can be given the same frames as normal windows
(@code{decorate-transients})

@item Newly-displayed transient windows can be automatically given the
focus if their parent window is focused (@code{transients-get-focus})

@item Any newly-displayed windows can be automatically given the input
focus (@code{focus-windows-when-mapped})

@item The @code{foreground}, @code{background} and @code{font}
attributes of each frame part may now refer to a function

@item Fixed the window-move bug whereby the first motion event was
discarded

@item Fixed the bug where windows may be placed partially off the root
window, even if they needn't be

@item Fixed the shaped frame parts bug (they didn't work)

@item Miscellaneous other bug-fixes

@end itemize


@unnumberedsec 0.1

First proper release
