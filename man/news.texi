@c -*- texinfo -*-

@chapter News

This lists the user-visible changes made to Sawmill, and which releases
they occurred between. For more detailed information see the
@file{ChangeLog} files in the Sawmill source tree.


@unnumberedsec 0.9

@itemize @bullet

@item The first-fit and best-fit algorithms are now much more
intelligent, e.g. instead of falling back to random placement when a
window can't be placed without overlapping an existing window, they
will attempt to minimize this degree of overlapping

@item Use Imlib's fuzzy color matching for all color allocation; this
should help on @code{PseudoColor} visuals

@item Added an @code{xterm} command to launch an xterm

@item Improved the bindings customization widget layout; added a
@samp{Copy} button to insert a copy of the current binding

@item Fix race condition between startup of sawmill and gmc; sawmill
now has earlier priority

@item Fix seg fault when running out of color cells while generating a
window frame

@item Fix bug where the window-workspace mapping wasn't reloaded from
saved sessions

@item Fix cancel/revert problems in bindings widget

@item Fix problems binding to shifted keys when using the XKEYBOARD
extension and XFree86

@end itemize


@unnumberedsec 0.8

@itemize @bullet

@item First attempt at best-fit window placement (doesn't really work
properly yet@dots{})

@item Added a customization option to focus windows when they're
un-iconified (@code{focus-windows-on-uniconify})

@item Fix bug in click-to-focus mode where the click is only passed
through to the client window, not to any local bindings of the wm

@item Don't leave windows unframed if there's an error in the user's
startup files

@item Fix bug in @code{preallocated-workspaces} option

@item Don't place windows off-screen in first-fit mode

@end itemize


@unnumberedsec 0.7

@itemize @bullet

@item Added stack-based window cycling, bound to @kbd{M-TAB} by
default. Hold @key{Meta}, keep pressing @key{TAB} until the correct
window is reached, then let go of @key{Meta}.

@item Added first-fit window placement (a.k.a smart-placement)

@item Completed first stage of workspace rewrite---shouldn't go
ballistic when windows are removed anymore

@item Added @code{override-frame-part-classes} variable---allows all
frame properties to be overridden on a per-class basis

@item Click-to-focus now accepts any button and any modifiers

@item Don't snap to gmc icons or panels

@item Added an @code{auto-window-type-alist} variable mapping window
names to border types

@item New variables @code{eval-modifier-events} and
@code{eval-key-release-events} to allow catching these types of
keyboard events, disabled by default

@item Added functions for actively grabbing the keyboard

@item Removed the long names of the keyboard modifiers, only the single
character modifiers are left

@item If no alt modifier, set it to the same as meta; new variables
@code{alt-keysyms} and @code{meta-keysyms} describe the virtual
modifier assignments

@item Fix bug when handling shaped frame parts---it was possible to go
into a long enter-, leave-notify loop when the old shape was cleared

@item Fix bug where opaque resizing with snap-to-edges on moved the
window as well as resizing it

@item Fix bug when raising the only managed window

@item Fix bug where very small client windows got weirdly shaped
frames

@end itemize


@unnumberedsec 0.6

@itemize @bullet

@item Define the standard @dfn{classes} of frame parts (i.e. things
like close button, title, left border, etc...) then allow the state of
members of these classes to be set in one place (the
@code{frame-part-classes} variable). This should ensure that different
themes have the same feel (but a feel that may be customized by the
user)

@item Allow frame parts to be removed if possible (if they have the
@code{removable} property). Nothing makes use of this yet

@item Added window-shading, double-click button1 on the title bar

@item Created a sawmill capplet for the GNOME control center. Use the
@samp{--enable-capplet} configure option to build it

@item First attempt at a technical manual (very quickly written, so
probably some inaccuracies)

@item In the @code{gtk} theme, draw bevels on window decorations

@item Use spin-buttons in the configurator to enter numbers

@item Add option @code{focus-proxy-click} controlling whether to pass
the focus-inducing button-press event to the underlying window (in
click-to-focus mode)

@item Changed the bindings in window borders, it's now the more usual
button1 to resize, button2 to move

@item When clicking and dragging windows, ensure that the clicked frame
part stays clicked until the button is released

@item If in click-to-focus mode, and there's no parent window to focus
when the focused window is closed, focus the topmost window (not the
window under the pointer as in the other focus modes)

@item Changing window frames is @emph{much} less ugly, no flicker at
all!

@item Try to optimise window restacking some more

@item Sped up opaque window moving when the position display is enabled

@item Preserve iconified state across restarts

@item Optimise updating the shape of an unframed window (this stops gmc
icons flashing annoyingly)

@item Fix bugs in click-to-focus mode where some windows were
un-focusable

@item Fix bug where cycling through windows in click-to-focus mode
didn't focus the activated window

@item Fix bug where comparing sawmill lisp objects caused a crash

@item Fix bug where initiating a resize in the middle of the window
didn't allow any of the edges to be moved

@item Fix bug where changing the ``decorate transients'' option didn't
alter any existing transient windows

@item Fix bug where iconifying a sticky or ignored window gave no way
of reclaiming it---these windows now appear at the end of the window
menu

@end itemize


@unnumberedsec 0.5

@itemize @bullet

@item Now does session management. The scheme is extensible, arbitrary
Lisp modules can save and restore window state due to their own
functionality (using the @code{sm-window-save-functions} and
@code{sm-restore-window-hook} hooks). See @file{lisp/workspace.jl} for
an example

@item Displays window position or dimensions whilst interactively
moving or resizing a window (@code{move-show-position},
@code{resize-show-dimensions})

@item Mechanism for setting frame styles on a per-window basis (this
was always possible, just not easy). The @code{auto-frame-style-alist}
variable associates window name regular expressions with frame styles.
Also, the @code{window-ops-menu} has a new submenu with all possible
styles

@item New option @code{preallocated-workspaces}, the number of
workspaces to create at startup

@item Window-workspace mapping is preserved through restart (as long as
the GNOME hints are enabled)

@item Theme directories may contain a short @file{README} file that
will be displayed in the configuration tool

@item Changed the custom file to @file{~/.sawmill/custom} instead of
@file{~/.sawmill-custom}. The old file will be moved to the new
location if it exists

@item Install @file{sawmill-menu} under @file{libexec} since it
shouldn't be run manually

@item Option in @code{gradient} theme to create full-sized gradient
images, trading memory for quality

@item Workaround the flicker when raising windows

@item Changed most of the @code{menus} and @code{custom} customize
options into normal variables (they're not particularly intuitive)

@end itemize


@unnumberedsec 0.4

@itemize @bullet

@item Frame parts can now be highlighted when the mouse is over them,
also they ``un-click'' and ``re-click'' as the pointer leaves and
re-enters their window. ButtonRelease bindings are only activated when
the mouse is in the window at the time

@item Frame part backgrounds can now be rendered on-the-fly using the
new @code{renderer} property in frame definitions. This property is a
function called with args @code{(@var{image} @var{state})}; it should
draw a background into @var{image} for the specified state (@code{nil},
@code{focused}, @code{highlighted} or @code{clicked})

@item New theme @code{gtk}. This reads the default GTK style and uses
the associated colors and pixmaps to decorate windows. It doesn't try
to handle engine-based themes. It should automatically detect when the
default style changes (if changed by the GNOME control center). Do
@samp{sawmill-client -c gtk-reload-style} in the shell to reload the
style manually

@item Functions for drawing color gradients and bevels into images. The
new @code{gradient} theme uses these and on-the-fly rendering to do
@code{afterstep}-like window titles

@item Configurator changes: use a paned widget to separate the list of
groups from the settings (stops their relative sizes changing), allow
each group to be customized separately, either through a new set of
root-submenus or the commands @code{customize:@var{group}} for each
@var{group}.

@item Changed the way that ``themes'' are organised, each theme now
gets its own directory, which must include a @file{theme.jl} or
@file{theme.jlc} script to initialise a frame-style of the same name as
the directory. While this script is being evaluated the image path is
set so that the theme can load any images stored in its directory.

Also created the variable @code{theme-load-path} containing the list of
directories searched when trying to load a theme. By default it
contains two directories: @file{~/.sawmill/themes/} and
@file{@var{prefix}/share/sawmill/@var{version}/themes}.

@item Resizing now chooses the direction to resize the window in by the
initial position of the pointer in relation to the window. The window
is divided into a 3x3 grid, the pointer must be in one of the outer
rectangles to resize in that direction

@item New commands @code{select-workspace:@var{X}} for @var{X} between
1 and 9

@item Support multiple depths, or layers, of windows

@item It's now possible to move the current workspace up or down the
list of all workspaces

@item New option @samp{-c COMMAND} to @code{sawmill-client}; invokes
the named interactive function

@item When an app asks for no title and no border, give it what it
wants---use the new @code{unframed} window type

@item The maximize button works

@item Option to control placement of transient windows
(@code{place-transient-mode})

@item Changing the frame style preserves the original window stacking
order

@item Added documentation strings for most built-in functions

@item Fix bug of evaluating both KeyPress @emph{and} KeyRelease events

@item Fix bug of making the shape mask of unshaped client windows too
big

@item Fix bug where already-handled BadWindow errors were being reported

@item Fix bug where the @code{window-ops-menu} could be displayed from
one window but then affect a different window

@item Fix bug where click-to-focus doesn't work for new windows

@item Fix bug where deleting the last workspace selected the first, not
the new last workspace

@item Fix bug where changing a colormap when no window is focused
causes a segfault

@item Fix bug where iconifying a window may leave it in the clicked
state after it's uniconified

@item Fix Caps_Lock and Num_Lock modifiers interfering with bindings

@item Fix accessing X properties on 64-bit architectures

@item Fix bug where pointer may be left grabbed after moving a window

@end itemize


@unnumberedsec 0.3a

@itemize @bullet

@item Support the maximized GNOME window states

@item Where available, show documentation strings of commands in the
configurator

@item Improve the method of handling clicks in frame-parts

@item Fix asynchronous client-server protocol

@item Fix interactive window moving/resizing (don't leave traces of the
rubber-band, stop the window initially ``jumping'' to the pointer)

@end itemize


@unnumberedsec 0.3

@itemize @bullet

@item Implemented window maximization

@item Added support for snapping to window edges when interactively
moving windows (@code{move-snap-edges} and @code{move-snap-epsilon})

@item First attempt at handling a subset of the Motif and OpenLook
window hints

@item Removed the @code{sloppy-focus} variable, it's replaced by
@code{focus-mode}. This can currently be one of @code{enter-exit}
(normal focus follows pointer), @code{enter-only} (``sloppy'' focus) or
@code{click} (click to focus)

@item When resolving pointer events, scan the @code{keymap} property of
the window under the pointer, not the focused window (as with keypress
events)

@item The @file{sawmill-client} program can now communicate inter-host,
since it uses X properties not raw sockets

@item New hook @code{before-exit-hook}, called immediately before
shutting down

@item Rewrote the GNOME support as a Lisp module

@item Placing windows interactively now works

@item Fixed the bug on Solaris where deleting windows could cause a
segmentation fault

@end itemize


@unnumberedsec 0.2

@itemize @bullet

@item Added a user-customization system, inspired by Emacs' customize
facility. Invoke this through the @samp{sawmill-ui} program, or from
the @samp{Customize...} entry in the main menu. All changes are stored
in the Lisp script @file{~/.sawmill-custom}

@item Selected windows may now be raised
(@code{raise-selected-windows})

@item It's possible to prevent the mouse pointer being warped to
selected windows (@code{warp-to-selected-windows})

@item The @code{brushed-metal} and @code{simple} themes now define all
four standard frame types

@item Frame themes are now stored in a separate directory
(@file{@var{prefix}/share/sawmill/@var{version}/lisp/themes}) so that
the list of all available themes can be made automatically

@item The frame colors of the @code{simple} frame style can now be
customized (@code{simple-normal-color} and @code{simple-active-color})

@item The @file{sawmill-defaults.jl} script enables GNOME compliance
unconditionally (since it has no ill-effects even if GNOME isn't being
used)

@item Transient windows can be given the same frames as normal windows
(@code{decorate-transients})

@item Newly-displayed transient windows can be automatically given the
focus if their parent window is focused (@code{transients-get-focus})

@item Any newly-displayed windows can be automatically given the input
focus (@code{focus-windows-when-mapped})

@item The @code{foreground}, @code{background} and @code{font}
attributes of each frame part may now refer to a function

@item Fixed the window-move bug whereby the first motion event was
discarded

@item Fixed the bug where windows may be placed partially off the root
window, even if they needn't be

@item Fixed the shaped frame parts bug (they didn't work)

@item Miscellaneous other bug-fixes

@end itemize


@unnumberedsec 0.1

First proper release
